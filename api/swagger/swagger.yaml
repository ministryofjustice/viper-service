---
  swagger: "2.0"
  info:
    title: "Analytics API"
    version: "0.0.1"
    description: "Provides the ability to query analytics results sets"
  basePath: "/"
  paths:
    /health:
      get:
        summary: "Health Check"
        description: "Performs a basic application health check"
        responses:
          200:
            description: "Success"
            examples:
              application/json:
                healthy: true
                checks.db: "ok"
                uptime: 3688.422,
                build.buildNumber: "901"
                build.gitRef: "83e46a38509309220da19afa630b5354c56da39b"
                version: "0.8.0"
            schema:
              "$ref": "#/definitions/healthCheckResult"
          500:
            description: "Unhealthy"
            examples:
              application/json:
                healthy: false
                checks.db: "Error: its broken"
                uptime: 3688.422,
                build.buildNumber: "901"
                build.gitRef: "83e46a38509309220da19afa630b5354c56da39b"
                version: "0.8.0"
            schema:
              "$ref": "#/definitions/healthCheckResult"
        tags:
          - "Health check"
        produces:
          - "application/json"
    /viper/{nomsId}:
      parameters:
        - name: "nomsId"
          in: "path"
          required: true
          type: "string"
          pattern: "^[A-Za-z]\\d{4}[A-Za-z]{2}$"
          description: "A known NOMS ID"
          x-example: "I9876RA"
      get:
        summary: "Retrieve VIPER Rating"
        description: "Retrieves a single VIPER Rating from the dataset  Pre-seeded values for smoke testing: `B8888BB`, `I1111II`, `O0000OO`"
        responses:
          200:
            description: "Success"
            examples:
              application/json:
                nomsId: "I9876RA"
                viperRating: 0.92
            schema:
              "$ref": "#/definitions/viperRatingResult"
          400:
            description: "Invalid NOMS Id"
            examples:
              application/json:
                message: "Request validation failed: Parameter (nomsId) does not match required pattern: [A-Z]\\d{4}[A-Z]{2}"
            schema:
              "$ref": "#/definitions/invalidArgumentError"
          404:
            description: "Not Found"
            examples:
              application/json:
                message: "Resource Not Found"
            schema:
              "$ref": "#/definitions/notFoundError"
        tags:
          - "VIPER Rating"
        produces:
          - "application/json"
  definitions:
    viperRatingResult:
      type: "object"
      properties:
        nomsId:
          type: "string"
          description: "A valid NOMS ID"
          pattern: "[A-Z]\\d{4}[A-Z]{2}"
          example: "I9876RA"
        viperRating:
          type: "number"
          description: "A percentile VIPER Rating"
          example: 0.56
          maximum: 1
          minimum: 0
          format: "double"
      required:
        - "nomsId"
        - "viperRating"
    invalidArgumentError:
      type: "object"
      properties:
        code:
          type: "string"
          description: "A status code description"
          example: "Invalid Argument"
        message:
          type: "string"
          description: "A message detailing the error"
          example: "Request validation failed: Parameter (nomsId) does not match required pattern: [A-Z]\\d{4}[A-Z]{2}"
      required:
        - "message"
    notFoundError:
      type: "object"
      properties:
        code:
          type: "string"
          description: "A status code description"
          example: "Not Found"
        message:
          type: "string"
          description: "A message detailing the error"
          example: "Resource Not Found"
      required:
        - "message"
    healthCheckResult:
      type: "object"
      properties:
        healthy:
          type: "boolean"
          description: "Are we healthy?"
          example: true
        checks:
          type: "object"
          properties:
            db:
              type: "string"
              description: "How the db connection is feeling"
              example: "ok"
        uptime:
          type: "number"
          description: "Server uptime in seconds"
          example: 3688.422

        build:
          type: "object"
          properties:
            buildNumber:
              type: "string"
              description: "CI build number"
              example: "901"
            gitRef:
              type: "string"
              description: "Git reference"
              example: "83e46a38509309220da19afa630b5354c56da39b"
            version:
              type: "string"
              description: "Artifact version"
              example: "0.8.0"
